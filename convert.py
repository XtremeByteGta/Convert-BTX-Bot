import os
import shutil
import zipfile
import logging
import asyncio
import random
import string
import aiohttp
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '1234567890987654321'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a")
logger = logging.getLogger(__name__)

CHANNEL_ID = "@xtremebyte"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 123456789

def generate_prefix():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=4))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    try:
        chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if chat_member.status in ["member", "creator", "administrator"]:
            return True
    except Exception:
        pass
    keyboard = [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")]]
    await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
    return False

def subscription_required(handler_func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await check_subscription(update, context):
            await handler_func(update, context)
    return wrapper

#start
@subscription_required
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é BTX-—Ñ–∞–π–ª—ã –≤ PNG. –û—Ç–ø—Ä–∞–≤—å ZIP, –æ–¥–∏–Ω–æ—á–Ω—ã–π BTX –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª!")

#info
@subscription_required
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤—ã, –æ–¥–∏–Ω–æ—á–Ω—ã–µ BTX-—Ñ–∞–π–ª—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ PNG.")

#agreement
@subscription_required
async def agreement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å, —á—Ç–æ –∞–≤—Ç–æ—Ä –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")

#feedback
@subscription_required
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace("/feedback", "").strip()
    user_id = update.effective_user.id
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /feedback –ë–æ—Ç —Å—É–ø–µ—Ä!")
        return
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç {user_id}: {text}")

#help
@subscription_required
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é BTX-—Ñ–∞–π–ª—ã –≤ PNG. –í–æ—Ç –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å:\n\n"
        "1Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª BTX:** –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª .btx ‚Äî —è –≤–µ—Ä–Ω—É PNG.\n"
        "   –ü—Ä–∏–º–µ—Ä: file.btx\n\n"
        "2Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å ZIP-–∞—Ä—Ö–∏–≤:** –ó–∞–≥—Ä—É–∑–∏—Ç–µ .zip —Å BTX-—Ñ–∞–π–ª–∞–º–∏ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ ZIP —Å PNG.\n"
        "   –ü—Ä–∏–º–µ—Ä: archive.zip (–¥–æ 50 –ú–ë)\n\n"
        "3Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É:** –ö–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ .btx –∏–ª–∏ .zip (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å Google Drive).\n"
        "   –ü—Ä–∏–º–µ—Ä: https://drive.google.com/file/d/12345/view\n\n"
        "4Ô∏è‚É£ **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "   /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "   /info ‚Äî –£–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é\n"
        "   /agreement ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n"
        "   /feedback [—Ç–µ–∫—Å—Ç] ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\n"
        "   /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @xtremebyte, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ /feedback."
    )
    await update.message.reply_text(help_text)


async def process_btx_file(file_path, user_dir):
    if not os.path.isfile(file_path):
        return False
    with open(file_path, 'rb+') as file:
        file.seek(4)
        data = file.read()
    file_name = os.path.splitext(os.path.basename(file_path))[0]
    ktx_file_path = os.path.join(user_dir, f"{file_name}.ktx")
    with open(ktx_file_path, 'wb') as ktx_file:
        ktx_file.write(data)

    process = await asyncio.create_subprocess_exec("convertXtremeByte.exe", "-d", "-i", ktx_file_path,
        stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    await process.communicate()

    png_files = []
    for file_name in os.listdir(user_dir):
        if file_name.endswith("_Out.png"):
            new_file_name = file_name.replace("_Out", "")
            os.rename(os.path.join(user_dir, file_name), os.path.join(user_dir, new_file_name))
            png_files.append(new_file_name)
    return png_files if png_files else False


@subscription_required
async def handle_btx_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        document = update.message.document
        if not document.file_name.endswith('.btx'):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .btx!")
            return

        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        user_dir = f"user_{user_id}"
        os.makedirs(user_dir, exist_ok=True)

        file_obj = await document.get_file()
        btx_file_path = os.path.join(user_dir, document.file_name)
        await file_obj.download_to_drive(btx_file_path)

        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ BTX –Ω–∞—á–∞–ª–∞—Å—å...")

        png_files = await process_btx_file(btx_file_path, user_dir)
        if not png_files:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.")
            shutil.rmtree(user_dir, ignore_errors=True)
            return

        for png_file in png_files:
            with open(os.path.join(user_dir, png_file), 'rb') as png:
                await context.bot.send_document(chat_id=chat_id, document=png, caption=f"–í–∞—à —Ñ–∞–π–ª: {png_file}")

        shutil.rmtree(user_dir, ignore_errors=True)

    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ BTX: {str(e)}")


@subscription_required
async def handle_zip_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        document = update.message.document
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id

        if document.file_size > 50 * 1024 * 1024:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ZIP ‚Äî 50 MB.")
            return

        file_obj = await document.get_file()
        user_dir = f"user_{user_id}"
        os.makedirs(user_dir, exist_ok=True)
        zip_file_path = os.path.join(user_dir, document.file_name)
        await file_obj.download_to_drive(zip_file_path)

        try:
            with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
                zip_ref.extractall(user_dir)
        except Exception:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å ZIP-–∞—Ä—Ö–∏–≤.")
            shutil.rmtree(user_dir, ignore_errors=True)
            return

        btx_files = [os.path.join(root, f) for root, _, files in os.walk(user_dir) for f in files if f.endswith('.btx')]
        if not btx_files:
            await update.message.reply_text("BTX-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            shutil.rmtree(user_dir, ignore_errors=True)
            return

        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å...")

        all_png_files = []
        for btx_file in btx_files:
            png_files = await process_btx_file(btx_file, user_dir)
            if png_files:
                all_png_files.extend(png_files)

        if not all_png_files:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.")
            shutil.rmtree(user_dir, ignore_errors=True)
            return

        original_name = os.path.splitext(document.file_name)[0]
        prefix = generate_prefix()
        final_zip_name = f"{prefix}_{original_name}.zip"
        final_zip_path = os.path.join(user_dir, final_zip_name)

        with zipfile.ZipFile(final_zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for png_file in all_png_files:
                zipf.write(os.path.join(user_dir, png_file), arcname=png_file)

        with open(final_zip_path, 'rb') as zipf:
            await context.bot.send_document(chat_id=chat_id, document=zipf, caption=f"–í–∞—à –∞—Ä—Ö–∏–≤: {final_zip_name}")

        shutil.rmtree(user_dir, ignore_errors=True)

    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞.")
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ZIP: {str(e)}")


@subscription_required
async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = update.message.text.strip()
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id

        if not re.match(r'^https?://', url):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (http/https).")
            return

        if "drive.google.com" in url:
            match = re.search(r'/d/([a-zA-Z0-9_-]+)', url)
            if match:
                file_id = match.group(1)
                url = f"https://drive.google.com/uc?export=download&id={file_id}"
            else:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ Google Drive.")
                return

        await update.message.reply_text("–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ...")

        user_dir = f"user_{user_id}"
        os.makedirs(user_dir, exist_ok=True)

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
                    shutil.rmtree(user_dir, ignore_errors=True)
                    return

                content_disposition = resp.headers.get('Content-Disposition')
                if content_disposition and 'filename=' in content_disposition:
                    file_name = content_disposition.split('filename=')[-1].strip('";')
                else:
                    content_type = resp.headers.get('Content-Type', '').lower()
                    prefix = generate_prefix()
                    if 'zip' in content_type:
                        file_name = f"downloaded_{prefix}.zip"
                    elif 'octet-stream' in content_type:
                        file_name = f"downloaded_{prefix}.btx"
                    else:
                        file_name = f"downloaded_{prefix}.bin"

                file_path = os.path.join(user_dir, file_name)

                with open(file_path, 'wb') as f:
                    f.write(await resp.read())

        if file_name.endswith('.btx'):
            await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ BTX –Ω–∞—á–∞–ª–∞—Å—å...")
            png_files = await process_btx_file(file_path, user_dir)
            if not png_files:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.")
                shutil.rmtree(user_dir, ignore_errors=True)
                return
            for png_file in png_files:
                with open(os.path.join(user_dir, png_file), 'rb') as png:
                    await context.bot.send_document(chat_id=chat_id, document=png, caption=f"–í–∞—à —Ñ–∞–π–ª: {png_file}")

        elif file_name.endswith('.zip'):
            try:
                with zipfile.ZipFile(file_path, 'r') as zip_ref:
                    zip_ref.extractall(user_dir)
            except Exception:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å ZIP.")
                shutil.rmtree(user_dir, ignore_errors=True)
                return

            btx_files = [os.path.join(root, f) for root, _, files in os.walk(user_dir) for f in files if f.endswith('.btx')]
            if not btx_files:
                await update.message.reply_text("BTX-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                shutil.rmtree(user_dir, ignore_errors=True)
                return

            await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å...")
            all_png_files = []
            for btx_file in btx_files:
                png_files = await process_btx_file(btx_file, user_dir)
                if png_files:
                    all_png_files.extend(png_files)

            if not all_png_files:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.")
                shutil.rmtree(user_dir, ignore_errors=True)
                return

            prefix = generate_prefix()
            final_zip_name = f"{prefix}_downloaded.zip"
            final_zip_path = os.path.join(user_dir, final_zip_name)
            with zipfile.ZipFile(final_zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for png_file in all_png_files:
                    zipf.write(os.path.join(user_dir, png_file), arcname=png_file)

            with open(final_zip_path, 'rb') as zipf:
                await context.bot.send_document(chat_id=chat_id, document=zipf, caption=f"–í–∞—à –∞—Ä—Ö–∏–≤: {final_zip_name}")

        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–∞ .btx –∏–ª–∏ .zip.")

        shutil.rmtree(user_dir, ignore_errors=True)

    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.")
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {str(e)}")


async def set_bot_commands(application):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("info", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"),
        BotCommand("agreement", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"),
        BotCommand("feedback", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É"), 
    ]
    await application.bot.set_my_commands(commands)


def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("agreement", agreement))
    application.add_handler(CommandHandler("feedback", feedback))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Document.MimeType('application/zip'), handle_zip_file))
    application.add_handler(MessageHandler(filters.Document.FileExtension('btx'), handle_btx_file))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
    application.post_init = set_bot_commands
    application.run_polling()

if __name__ == '__main__':
    main()